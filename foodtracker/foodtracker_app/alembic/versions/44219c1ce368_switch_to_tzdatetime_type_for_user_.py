"""Switch to TZDateTime type for user datetime fields

Revision ID: 44219c1ce368
Revises: 27957fc41861
Create Date: 2025-06-19 12:35:14.432988

"""

from typing import Sequence, Union

from alembic import op
from foodtracker_app.db.database import TZDateTime
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "44219c1ce368"
down_revision: Union[str, None] = "27957fc41861"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "token_expires_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=TZDateTime(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "reset_password_expires_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=TZDateTime(),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        type_=TZDateTime(),
        existing_nullable=True,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "users",
        "created_at",
        existing_type=TZDateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "reset_password_expires_at",
        existing_type=TZDateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    op.alter_column(
        "users",
        "token_expires_at",
        existing_type=TZDateTime(),
        type_=postgresql.TIMESTAMP(timezone=True),
        existing_nullable=True,
    )
    # ### end Alembic commands ###
